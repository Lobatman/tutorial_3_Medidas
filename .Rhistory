library(kableExtra)
tabela_formatada <- data.frame(FrequenciaAbsoluta = as.vector(tabela_freq_albumina_t),
FrequenciaRelativa = as.vector(tabela_freq_albumina),
xi = as.vector(ponto_medio_classes),
"fi(xi)^2" = as.vector(fixi_quadrado),
fixi = as.vector(soma_fixi))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame(FrequenciaAbsoluta = as.vector(tabela_freq_albumina_t),
FrequenciaRelativa = as.vector(tabela_freq_albumina),
xi = as.vector(ponto_medio_classes),
fixi_quadrado = as.vector(fixi_quadrado),
fixi = as.vector(soma_fixi))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
sd_exemplo <- c(20, 30, 40, 50, 60, 70, 80)
desvio_padrao <- sd(sd_exemplo)
desvio_padrao
sd_classes <- sqrt(variancia_classes)
sd_classes
cv_exemplo <- (20, 30, 40, 50, 60, 70, 80)
cv_exemplo <- (20, 30, 40, 50, 60, 70, 80)
cv_exemplo <- c(20, 30, 40, 50, 60, 70, 80)
media_cv <- mean(cv_exemplo)
media_cv
desvio_padrao_cv <- sd(cv_exemplo)
desvio_padrao_cv
coef_variacao <- (desvio_padrao_cv / media_cv) * 100
coef_variacao
ep_exemplo <- c(20, 30, 40, 50, 60, 70, 80)
media_ep <- mean(ep_exemplo)
media_ep
desvio_padrao_ep <- sd(ep_exemplo)
desvio_padrao_ep
tamanho_amostra_ep <- length(ep_exemplo)
tamanho_amostra_ep
erro_padrao_media <- desvio_padrao_ep / sqrt(tamanho_amostra_ep)
erro_padrao_media
# Carregar a biblioteca ggplot2
library(ggplot2)
# Criar um data frame com as medidas
data_medidas <- data.frame(Medida = c("Média", "Desvio Padrão", "Erro Padrão da Média"),
# Criar um data frame com as medidas
data_medidas <- data.frame(Medida = c("Media", "Desvio Padrao", "Erro Padrao da Media"),
Valor = c(media_ep, desvio_padrao_ep, erro_padrao_media))
# Criar o gráfico de barras com barras de erro
plot_ep_s <- ggplot(data_medidas, aes(x = Medida, y = Valor)) +
geom_bar(stat = "identity", fill = "blue") +
geom_errorbar(aes(ymin = Valor - erro_padrao_media, ymax = Valor + erro_padrao_media), width = 0.4) +
labs(y = "Valor", title = "Comparação de Medidas") +
theme_minimal()
plot_ep_s
exemplo_boxplot <- data.frame( Exemplo_1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Exemplo_2 = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
exemplo_boxplot <- data.frame( exemplo_1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
exemplo_2 = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
exemplo_boxplot <- data.frame( exemplo_1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
exemplo_2 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
exemplo_boxplot <- data.frame( exemplo_1 = c(10, 15, 20, 30, 45, 50, 55),
exemplo_2 = c(9, 20, 25, 30, 40, 50, 55))
#Criando o boxplot
boxplot_1 <- ggplot() +
geom_boxplot(y=exemplo_boxplot) +
```
#Criando o boxplot
boxplot_1 <- ggplot() +
geom_boxplot(y=exemplo_boxplot) +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
boxplot_1
exemplo_boxplot <- data.frame( exemplo_1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#Criando o boxplot
boxplot_1 <- ggplot() +
exemplo_boxplot <- data.frame( exemplo_1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#Criando o boxplot
boxplot_1 <- ggplot() +
exemplo_boxplot <- data.frame(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#Criando o boxplot
boxplot_1 <- ggplot() +
exemplo_boxplot <- data.frame(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#Criando o boxplot
boxplot_1 <- ggplot() +
geom_boxplot(y=exemplo_boxplot) +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
#Criando o data frame
exemplo_boxplot <- data.frame(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#Criando o boxplot
boxplot_1 <- ggplot() +
geom_boxplot(y=exemplo_boxplot) +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
boxplot_1
boxplot_1
exemplo_boxplot <- c(10, 15, 20, 25, 30, 35, 40, 45, 50)
#Criando o boxplot
boxplot_1 <- ggplot() +
geom_boxplot(y=exemplo_boxplot) +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
boxplot_1
mediana_bp <- median(exemplo_boxplot)
#Criando o boxplot
boxplot_1 <- ggplot() +
geom_boxplot(y=exemplo_boxplot) +
geom_hline(yintercept = mediana_bp, linetype = "dashed", color = "red") +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
boxplot_1
#Criando o boxplot
boxplot(exemplo_boxplot, main = "Exemplo boxplot", ylab = "Valores")
exemplo_boxplot <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#Criando o boxplot
boxplot(exemplo_boxplot, main = "Exemplo boxplot", ylab = "Valores")
exemplo_boxplot <- exemplo_1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
exemplo_boxplot <- exemplo_1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
exemplo_boxplot <- data.frame(exemplo_1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
exemplo_2 = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
exemplo_1 = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
exemplo_2 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
valores = c(exemplo_1, exemplo_2)
exemplo_boxplot <- data.frame( exemplo = c("Exemplo 1", "Exemplo 2"),
valores = c(exemplo_1, exemplo_2))
exemplo_boxplot <- data.frame( exemplo = c("Exemplo 1", "Exemplo 2"),
valores = c(exemplo_1, exemplo_2))
exemplo_2 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
exemplo_boxplot <- data.frame( exemplo = c("Exemplo 1", "Exemplo 2"),
valores = c(exemplo_1, exemplo_2))
#Criando o boxplot
boxplot(exemplo_boxplot, main = "Exemplo boxplot", ylab = "Valores")
#Criando o boxplot
boxplot_plot <- ggplot(exemplo_boxplot, aes(x = exemplo, y = valores)) +
geom_boxplot(stat = "identity", fill = "#ff8c1a") +
theme_minimal()
boxplot_plot
#Criando o data frame
exemplo_bp <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
boxplot_plot <- ggplot(exemplo_bp) +
geom_boxplot(y = exemplo_bp) +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
boxplot_plot <- ggplot(exemplo_bp) +
geom_boxplot(y = exemplo_bp) +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
boxplot_plot <- ggplot() +
geom_boxplot(y = exemplo_bp) +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
boxplot_plot
boxplot_plot <- ggplot(exemplo_bp) +
geom_boxplot(y = exemplo_bp) +
labs(y = "Valores", title = "Exemplo Boxplot") +
theme_minimal()
boxplot_plot
#Criando o data frame
dados <- c(10, 15, 20, 25, 30, 35, 40, 45, 50)
mediana <- median(dados)
quartil_1 <- quantile(dados, 0.25)
quartil_3 <- quantile(dados, 0.75)
iqr <- quartil_3 - quartil_1
p <- ggplot() +
geom_boxplot(y = dados) +
geom_hline(yintercept = mediana, linetype = "dashed", color = "red") +
geom_segment(aes(x = 1, xend = 1, y = quartil_1, yend = quartil_3), color = "blue") +
geom_segment(aes(x = 1 - 0.1, xend = 1 + 0.1, y = quartil_1, yend = quartil_1), color = "blue") +
geom_segment(aes(x = 1 - 0.1, xend = 1 + 0.1, y = quartil_3, yend = quartil_3), color = "blue") +
geom_segment(aes(x = 1, xend = 1, y = quartil_1, yend = quartil_1 - iqr), color = "green") +
geom_segment(aes(x = 1 - 0.1, xend = 1 + 0.1, y = quartil_1 - iqr, yend = quartil_1 - iqr), color = "green") +
geom_segment(aes(x = 1, xend = 1, y = quartil_3, yend = quartil_3 + iqr), color = "green") +
geom_segment(aes(x = 1 - 0.1, xend = 1 + 0.1, y = quartil_3 + iqr, yend = quartil_3 + iqr), color = "green") +
labs(y = "Valores", title = "Gráfico de Caixa com Quartis e IQR") +
theme_minimal()
p
exemplo_boxplot <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
boxplot(exemplo_boxplot)
dados_coluna_1 <- c(185, 185, 185)
dados_coluna_2 <- c(182, 184, 189)
dados_coluna_3 <- c(172, 180, 199)
amplitude_exemplo <- data.frame(
altura_cm_A = dados_coluna_1,
altura_cm_B = dados_coluna_2,
altura_cm_C = dados_coluna_3
)
kable(amplitude_exemplo)
library(kableExtra)
library(knitr)
kable(amplitude_exemplo)
kable_styling(
kable(amplitude_exemplo),
bootstrap_options = c("striped", "hover", "condensed"),
font_size = 12,
position = "center",
full_width = TRUE
)
kable(amplitude_exemplo) %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
varianca_coluna_B <- var(amplitude_exemplo$altura_cm_B)
varianca_coluna_B
media1 <- c(1,2,3,4,5)
media2 <- c(2,4,6,8,10)
media3 <- c(10,20,30,40,50)
m1 <- mean(media1)
m2 <- mean(media2)
m3 <- mean(media3)
sm1 <- sd(media1)
sm1
sm2 <- sd(media2)
sm2
sm3 <- sd(media3)
sm3
data_medidas <- data.frame(Medida = c("m1", "m2", "m3"),
Valor = c(m1, m2, m3),
Sd = c(sm1, sm2, sm3))
# Criando o gráfico de barras com linhas de erro
plot_ep_s <- ggplot(data_medidas,
aes(x = Medida, y = Valor)) +
geom_bar(stat = "identity", fill = "#ff8c1a") +
geom_errorbar(aes(ymin = Valor - Sd,
ymax = Valor + Sd),
width = 0.4) +
labs(y = "Valor", title = "Comparação de Medidas") +
theme_minimal()
# Criando o gráfico de barras com linhas de erro
libraru(ggplot2)
# Criando o gráfico de barras com linhas de erro
library(ggplot2)
plot_ep_s <- ggplot(data_medidas,
aes(x = Medida, y = Valor)) +
geom_bar(stat = "identity", fill = "#ff8c1a") +
geom_errorbar(aes(ymin = Valor - Sd,
ymax = Valor + Sd),
width = 0.4) +
labs(y = "Valor", title = "Comparação de Medidas") +
theme_minimal()
plot_ep_s
plot_ep_s <- ggplot(data_medidas,
aes(x = Medida, y = Valor)) +
geom_bar(stat = "identity", fill = "#ff8c1a") +
geom_errorbar(aes(ymin = Valor - Sd,
ymax = Valor + Sd),
width = 0.4) +
labs(y = "Valor", title = "Comparação de Medidas") +
theme_minimal()
plot_ep_s
media1 <- c(1,2,3,4,5)
media2 <- c(2,4,6,8,10)
media1 <- c(1,2,3,4,5)
media1 <- c(1,2,3,4,5)
media2 <- c(2,4,6,8,10)
media3 <- c(10,20,30,40,50)
m1 <- mean(media1)
m2 <- mean(media2)
m3 <- mean(media3)
sm1 <- sd(media1)
sm1
sm2 <- sd(media2)
sm2
sm3 <- sd(media3)
sm3
data_medidas <- data.frame(Medida = c("m1", "m2", "m3"),
Valor = c(m1, m2, m3),
Sd = c(sm1, sm2, sm3))
# Criando o gráfico de barras com linhas de erro
library(ggplot2)
plot_ep_s <- ggplot(data_medidas,
aes(x = Medida, y = Valor)) +
geom_bar(stat = "identity", fill = "#ff8c1a") +
geom_errorbar(aes(ymin = Valor - Sd,
ymax = Valor + Sd),
width = 0.4) +
labs(y = "Valor", title = "Comparação de Medidas") +
theme_minimal()
plot_ep_s
plot_ep_s <- ggplot(data_medidas,
aes(x = Medida, y = Valor)) +
geom_bar(stat = "identity", fill = "#ff8c1a") +
geom_errorbar(aes(ymin = Valor - Sd,
ymax = Valor + Sd),
width = 0.4) +
labs(y = "Valor", title = "Comparação de Medidas") +
theme_minimal()
plot_ep_s
plot_ep_s <- ggplot(data_medidas,
aes(x = Medida, y = Valor)) +
geom_bar(stat = "identity", fill = "#ff8c1a") +
geom_errorbar(aes(ymin = Valor - Sd,
ymax = Valor + Sd),
width = 0.4) +
labs(y = "Valor", title = "Comparacao de Medidas") +
theme_minimal()
plot_ep_s
# Carregando a biblioteca ggplot2
library(ggplot2)
# Criando os dados
media1 <- c(1,2,3,4,5)
media2 <- c(2,4,6,8,10)
media3 <- c(10,20,30,40,50)
# Calculando a média
m1 <- mean(media1)
m2 <- mean(media2)
m3 <- mean(media3)
# Calculando o Desvio Padrão
sm1 <- sd(media1)
sm2 <- sd(media2)
sm3 <- sd(media3)
#Criando o Data.Frame
data_medidas <- data.frame(Medida = c("m1", "m2", "m3"),
Valor = c(m1, m2, m3),
Sd = c(sm1, sm2, sm3))
# Criando o gráfico de barras com linhas de erro
plot_ep_s <- ggplot(data_medidas,
aes(x = Medida, y = Valor)) +
geom_bar(stat = "identity", fill = "#ff8c1a") +
geom_errorbar(aes(ymin = Valor - Sd,
ymax = Valor + Sd),
width = 0.4) +
labs(y = "Valor", title = "Comparacao de Medidas") +
theme_minimal()
plot_ep_s
plot_ep_s
m3
sm3
m1
peso_recem_nascidos <- c(2.5, 3.75, 2.25, 3.45, 3.75)
peso_recem_nascidos
mean(peso_recem_nascidos)
#Vetor do conjunto de dados
notas <- c(80, 85, 95)
#Vetor dos pesos
pesos <- c(6, 3, 1)
#Calculo da média
media_ponderada <- weighted.mean(notas, pesos)
#Resultado
media_ponderada
qtd_albumina <- c(5.1, 5, 5.2, 4.5, 4.8, 4.9, 5, 5.2, 5.4, 5.1, 4.9, 5, 4.9, 5.1, 5.3, 5.1, 5.1, 5.3, 4.7, 5.3, 4.7, 5.4, 5, 5.5, 5)
sort(qtd_albumina) #ordena os dados
range(qtd_albumina) #descobre o menor e o maior número
amp_total <- ceiling(max(qtd_albumina)-min(qtd_albumina))
amp_total
k <- nclass.FD(qtd_albumina)
length(qtd_albumina)
k <- ceiling((sqrt(length(qtd_albumina))))
c <- amp_total / (k-1)
infclass <- min(qtd_albumina)
supclass <- infclass + (k*c)
brk <- seq(infclass,supclass,c)
tabela_freq_albumina_t <- table(cut(qtd_albumina,breaks = brk, right = FALSE))
tabela_freq_albumina <- prop.table(tabela_freq_albumina_t)
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame(FrequenciaAbsoluta = as.vector(tabela_freq_albumina_t),
FrequenciaRelativa = as.vector(tabela_freq_albumina))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
#Descobrindo a média para dados agrupados
xi <- (brk[-1] + brk[-length(brk)]) / 2
xi
media_agrupada <- sum(xi * tabela_freq_albumina) /
sum(tabela_freq_albumina)
media_agrupada
media_agrupada_1 <- weighted.mean(xi, tabela_freq_albumina)
media_agrupada_1
library(tidyverse)
library(dplyr)
semanas <- c(1, 2, 3, 4, 5)
infectados <- c(3, 9, 27, 81, 243)
tabela <- tibble(Semanas = semanas, "n° de infectados" = infectados)
library(kableExtra)
library(knitr)
kable(tabela) %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
row_spec(0, bold = TRUE) %>%
row_spec(1:nrow(tabela), align = "c")
n_infectados <- c(3, 9, 27, 81, 243)
#Calculando a média Geométrica
media_geom <- prod(n_infectados)^(1/length(n_infectados))
media_geom
library(tidyverse)
library(dplyr)
dias <- c(1, 2, 3, 4, 5, 6, 7, 8)
mortos <- c(25, 85, 65, 45, 95, 75, 15, 35)
tabela_MM <- tibble(Dias = dias, "óbitos" = mortos)
library(kableExtra)
library(knitr)
kable(tabela_MM) %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
row_spec(0, bold = TRUE) %>%
row_spec(1:nrow(tabela_MM), align = "c")
library(tidyverse)
library(zoo)
#criando o vetor de dados
mortos <- c(25, 85, 65, 45, 95, 75, 15, 35)
#calculando a média móvel
media_m <- rollmean(mortos, k = 3, fill = NA)
media_m
library(ggplot2)
#Criando ua variável para as observações com valores de 1 até o comprimento máximo
observacoes <- 1: length(mortos)
#Criando um dataframe
df <- data.frame(observacoes = 1:length(mortos), mortos, media_m)
# Plotando o gráfico
ggplot(df, aes(x = observacoes)) +
geom_line(aes(y = mortos, color = "Óbitos")) +
geom_line(aes(y = media_m, color = "Média Móvel")) +
geom_point(aes(y = mortos), color = "black") +
geom_point(aes(y = media_m), color = "red") +
labs(title = "Óbitos por COVID-19", x = "Dias", y = "Óbitos", color = "Legenda") +
scale_color_manual(values = c("red", "black")) +
theme_minimal()
library(kableExtra)
library(knitr)
ano <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
n <- c(100, 100, 12, 10, 100, 100, 100, 100, 100, 100, 100)
tabela_lontras <- tabela_MM <- tibble(Ano = ano, n = n)
tabela_lontras %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
row_spec(0, bold = TRUE) %>%
row_spec(1:nrow(tabela_lontras), align = "c")
n <- c(100, 100, 12, 10, 100, 100, 100, 100, 100, 100, 100)
reciproco <- 1 / n
#calculando a média harmônica
media_harm <- length(n) / sum(reciproco)
media_harm
mediana_a <- c(2, 2, 4, 5, 6, 7, 8)
mediana_b <- c(3, 3, 4, 5, 7, 8, 9, 9)
median(mediana_a)
median(mediana_b)
freq_abs_acumulada <- cumsum(tabela_freq_albumina_t)
freq_abs_acumulada
library(knitr)
library(kableExtra)
tabela_formatada <- data.frame("Frequencia Absoluta" = as.vector(tabela_freq_albumina_t),
"Frequencia Relativa" = as.vector(tabela_freq_albumina), "Frequencia Abs Baixo" = as.vector(freq_abs_acumulada))
tabela_formatada <- cbind(Intervalo = names(tabela_freq_albumina_t), tabela_formatada)
kable(tabela_formatada, align = "c") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
kable_styling(bootstrap_options = "condensed") %>%
kable_styling(bootstrap_options = "condensed")
# Retomadno a tabela de frequéncias do exemplo
tabela_freq_albumina_t <- table(cut(qtd_albumina, breaks = brk, right = FALSE))
# identificando o intervalo que contém a mediana
intervalo_mediana <- which.max(tabela_freq_albumina_t)
intervalo_mediana
# Encontrando o limite inferior do intervalo que contém a mediana (LiRmd)
liRmd <- as.numeric(names(tabela_freq_albumina_t)[intervalo_mediana])
liRmd
# Encontrando a amplitude dos intervalos de classe (h)
h <- c[1]
h
# Encontrando o tamanho da amostra (n)
n <- sum(tabela_freq_albumina_t)
n
# Encontrando a frequência absoluta acumulada para baixo no intervalo anterior que contém a mediana (Fant)
fant <- sum(tabela_freq_albumina_t[1:(intervalo_mediana-1)])
fant
# Encontrando a frequência absoluta simples no intervalo que contém a mediana (Fmd)
fmd <- tabela_freq_albumina_t[intervalo_mediana]
fmd
mediana <- 5 + h * ((n/2 - fant)/fmd)
mediana
moda_a <- c(3, 4, 4, 5, 5, 5, 6, 7, 8)
table(moda_a)
moda_calculo <- subset(table(moda_a), table(moda_a) == max (table(moda_a)))
moda_calculo
#Retomadno a tabela de frequéncias do exemplo
tabela_freq_albumina_t <- table(cut(qtd_albumina, breaks = brk, right = FALSE))
#Encontrando o indice da classe da modal
indice_moda <- which.max(tabela_freq_albumina_t)
indice_moda
#Encontrando a frequência modal
frequencia_modal <- tabela_freq_albumina_t[indice_moda]
frequencia_modal
frequencia_anterior <- tabela_freq_albumina_t[indice_moda - 1]
frequencia_anterior
frequencia_seguinte <- tabela_freq_albumina_t[indice_moda + 1]
frequencia_seguinte
amplitude_modal <- c[1]
amplitude_modal
delta1 <- frequencia_modal - frequencia_anterior
delta1
delta2 <- frequencia_modal - frequencia_seguinte
delta2
moda_agrupada <- brk[indice_moda] + (delta1 / (delta1 + delta2)) * amplitude_modal
moda_agrupada
citation("dplyr")
citation("forcats")
citation("ggplot2")
citation("kableExtra")
citation("knitr")
citation("purr")
citation("pur")
citation("purrr")
citation("readr")
citation("stringr")
citation("tidyverse")
